name: tests

on:
  push:
    branches:
      - "*"
    # not on tags
  pull_request:

env:
  BLAKE3_CI: "1"
  RUSTFLAGS: "-D warnings"
  RUST_BACKTRACE: "1"

jobs:
  cargo_tests:
    name: ${{ matrix.target.name }} ${{ matrix.channel }}
    runs-on: ${{ matrix.target.os }}
    strategy:
      fail-fast: false
      matrix:
        target: [
          { "os": "ubuntu-latest",  "toolchain": "x86_64-unknown-linux-gnu", "cargo_test": "cargo test",     "name": "Linux GNU" },
          { "os": "ubuntu-latest",  "toolchain": "x86_64-pc-windows-msvc",   "cargo_test": "cargo xwintest", "name": "Linux - Windows MSVC" },
        ]
        channel: [stable, beta, nightly]
    env: 
      CARGO_XWINBUILD_VERSION: "0.4.0"
      XWIN_ARCH: "x86_64"
      XWIN_VARIANT: "desktop"
      XWIN_VERSION: "16"
      WINEDEBUG: "-all"
      CARGO_BUILD_TARGET: ${{ matrix.target.toolchain }}

    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ format('{0}-{1}', matrix.channel, matrix.target.toolchain) }}
        profile: minimal
        override: true


    - name: install dependencies
      if: ${{ matrix.target.name == 'Linux - Windows MSVC' }}
      run: |
        sudo apt-get update -y
        sudo apt-get install --quiet -y clang-tools llvm lld 
        sudo ln -s /usr/bin/clang-cl-[1-9][0-9] /usr/bin/clang-cl
        sudo ln -s /usr/bin/lld /usr/bin/lld-link
        sudo apt-get install --quiet --no-install-recommends -y wine-stable winetricks
        winetricks nocrashdialog

    # Cache
    - name: cache cargo-xwinbuild
      if: ${{ matrix.target.name == 'Linux - Windows MSVC' }}
      id: cache-cargo-xwinbuild
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-xwinbuild-${{ env.CARGO_XWINBUILD_VERSION }}
    - name: cache xwin
      if: ${{ matrix.target.name == 'Linux - Windows MSVC' }}
      id: cache-xwin
      uses: actions/cache@v2
      with:
        path: ~/.cache/cargo-xwinbuild
        key: xwin-${{ env.XWIN_ARCH }}-${{ env.XWIN_VARIANT }}-${{ env.XWIN_VERSION }}
    - name: install cargo-xwinbuild
      if: ${{ matrix.target.name == 'Linux - Windows MSVC' }}
      run: ls ~/.cargo/bin/cargo-xwinbuild || cargo install --version ${{ env.CARGO_XWINBUILD_VERSION }} cargo-xwinbuild
  
    # Print the compiler version, for debugging.
    - name: print compiler version
      if: ${{ matrix.target.name != 'Linux - Windows MSVC' }}
      run: cargo run --quiet
      working-directory: ./tools/compiler_version
    # Print out instruction set support, for debugging.
    - name: print instruction set support
      if: ${{ matrix.target.name != 'Linux - Windows MSVC' }}
      run: cargo run --quiet
      working-directory: ./tools/instruction_set_support
    - name: print instruction set support
      if: ${{ matrix.target.name == 'Linux - Windows MSVC' }}
      run: |
          cargo xwinbuild
          wine ./target/x86_64-pc-windows-msvc/debug/instruction_set_support.exe --quiet
      working-directory: ./tools/instruction_set_support
    # Default tests plus Rayon and RustCrypto trait implementations.
    - run: ${{ matrix.target.cargo_test }} --features=rayon,traits-preview
    # Same but with only one thread in the Rayon pool. This can find deadlocks.
    - name: "again with RAYON_NUM_THREADS=1"
      run: ${{ matrix.target.cargo_test }} --features=rayon,traits-preview
      env:
        RAYON_NUM_THREADS: 1
    # no_std tests.
    - run: ${{ matrix.target.cargo_test }} --no-default-features

    # A matrix of different test settings:
    # - debug vs release
    # - assembly vs Rust+C intrinsics vs pure Rust intrinsics
    # - different levels of SIMD support
    #
    # Full SIMD support.
    - run: ${{ matrix.target.cargo_test }} --features=
    - run: ${{ matrix.target.cargo_test }} --features=prefer_intrinsics
    - run: ${{ matrix.target.cargo_test }} --features=pure
    - run: ${{ matrix.target.cargo_test }} --features= --release
    - run: ${{ matrix.target.cargo_test }} --features=prefer_intrinsics --release
    - run: ${{ matrix.target.cargo_test }} --features=pure --release
    # No AVX-512.
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,prefer_intrinsics
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,pure
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512 --release
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,prefer_intrinsics --release
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,pure --release
    # No AVX2.
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,prefer_intrinsics
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,pure
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2 --release
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,prefer_intrinsics --release
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,pure --release
    # No SSE4.1
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,prefer_intrinsics
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,pure
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41 --release
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,prefer_intrinsics --release
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,pure --release
    # No SSE2
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,no_sse2
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,no_sse2,prefer_intrinsics
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,no_sse2,pure
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,no_sse2 --release
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,no_sse2,prefer_intrinsics --release
    - run: ${{ matrix.target.cargo_test }} --features=no_avx512,no_avx2,no_sse41,no_sse2,pure --release

    # Test benchmarks. RUSTC_BOOTSTRAP=1 lets this run on non-nightly toolchains.
    - run: ${{ matrix.target.cargo_test }} --benches --features=rayon
      env:
        RUSTC_BOOTSTRAP: 1
    # Test vectors.
    - name: test vectors
      run: ${{ matrix.target.cargo_test }}
      working-directory: ./test_vectors
    - name: test vectors intrinsics
      run: ${{ matrix.target.cargo_test }} --features=prefer_intrinsics
      working-directory: ./test_vectors
    - name: test vectors pure
      run: ${{ matrix.target.cargo_test }} --features=pure
      working-directory: ./test_vectors
    # Test b3sum.
    - name: test b3sum
      run: ${{ matrix.target.cargo_test }}
      working-directory: ./b3sum
    - name: test b3sum --no-default-features
      run: ${{ matrix.target.cargo_test }} --no-default-features
      working-directory: ./b3sum
    # Test C code.
    - name: ${{ matrix.target.cargo_test }} C bindings assembly
      run: ${{ matrix.target.cargo_test }}
      working-directory: ./c/blake3_c_rust_bindings
    - name: ${{ matrix.target.cargo_test }} C bindings intrinsics
      if: ${{ matrix.target.name != 'Linux - Windows MSVC' }}
      run: ${{ matrix.target.cargo_test }} --features=prefer_intrinsics
      working-directory: ./c/blake3_c_rust_bindings
    # Reference impl doc test.
    - name: reference impl doc test
      run: ${{ matrix.target.cargo_test }}
      working-directory: ./reference_impl
